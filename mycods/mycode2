import { useState, useEffect, useRef } from "react";
import { paragraphs } from "../paragraph";
import countdownTimer from "../timerFunc";

const Home = () => {
  const [para, setPara] = useState(null);
  const [userInput, setUserInput] = useState("");
  const [retry, setRetry] = useState(false);
  const [charIndex, setCharIndex] = useState(0);
  const [mistakes, setMistakes] = useState(0);
  const [timer, setTimer] = useState(60);
  const [wpm, setWpm] = useState(0);
  const [cpm, setCpm] = useState(0);
  const [isCompleted, setIsCompleted] = useState(false);
  const inpRef = useRef();
  const paraRef = useRef();

  const randomParagraph = () => {
    const randIndex = Math.floor(Math.random() * paragraphs.length);
    setPara(paragraphs[randIndex]);
  };
  
  const inputHandler = (e) => {
    setUserInput(e.target.value);
  };

  useEffect(() => {
    setRetry("false");

    setIsCompleted(false);

    setWpm(0);

    setUserInput("");

    setTimer(60);
    setCharIndex(0);

    setMistakes(0);
    randomParagraph();
    document.addEventListener("keydown", () => {
      if (inpRef.current) {
        inpRef.current.focus();
      }
      else{
        console.log('not available')
      }
    });
  }, [retry]);

  useEffect(() => {
    if (paraRef.current) {
      let characters = paraRef.current.querySelectorAll("span");
      let typedChar = userInput.split("");

      if (charIndex === typedChar.length - 1) {
        // Handle when typing is complete
        if (characters[charIndex].textContent === typedChar[charIndex]) {
          characters[charIndex].classList.add("correct");
        } else {
          characters[charIndex].classList.add("incorrect");
          setMistakes((prev) => prev + 1);
        }
        characters.forEach((span) => {
          span.classList.remove("active");
        });
        setCharIndex((prev) => prev + 1);
        characters[charIndex].classList.add("active");
      }

      characters.forEach((span, index) => {
        if (userInput.length === 0) {
          span.classList.remove("active", "incorrect", "correct");
        }
        if (index < charIndex) {
          span.classList.add("correct");
        } else {
          span.classList.remove("correct");
        }
        if (index === charIndex) {
          span.classList.add("active");
        } else {
          span.classList.remove("active");
        }
        if (typedChar[index] === span.textContent) {
          span.classList.remove("incorrect");
        }
        if (charIndex === characters.length) {
          setIsCompleted(true);
        }
      });
    }
  }, [charIndex, userInput]);

  useEffect(() => {
    if (timer == 0) {
      setIsCompleted(true);

      if (isCompleted) {
        countdownTimer(
          1,
          (tim) => tim,
          () => setRetry(true)
        );
      }
    }
  }, [timer, isCompleted]);

  useEffect(() => {
    if (!isCompleted) {
      const handleBackspace = (e) => {
        let characters = paraRef.current.querySelectorAll("span");
        if (e.keyCode === 8 && charIndex > 0) {
          characters[charIndex].classList.remove("incorrect", "correct");
          if (mistakes > 0) {
            setMistakes((prev) => prev - 1);
          }
          setCharIndex(charIndex - 1);
          setUserInput(userInput.slice(0, -1)); // Remove the last character from userInput
          e.preventDefault();
        }
        if (e.key === "Tab" || e.keyCode === 9) {
          e.preventDefault();
          setRetry(true);
        }
      };

      window.addEventListener("keydown", handleBackspace);

      return () => {
        window.removeEventListener("keydown", handleBackspace);
      };
    }
  }, [charIndex, userInput, isCompleted, mistakes]);


  return (
    <div className="wrapper">
      <input
        disabled={isCompleted}
        id="input-Tag"
        type="text"
        className="input-field"
        ref={inpRef}
        value={userInput}
        onChange={(e) => {
          inputHandler(e);
          let stopTimer = countdownTimer(timer, (curTime) => {
            setTimer(curTime);
            console.log(curTime)
            // setWpm( Math.random((((charIndex-mistakes)/5)/(60-timer))*60)  )
          });
          console.log(stopTimer)
          
        }}
      />
      <div className="content-box">
        <div className="typing-text" onClick={() => inpRef.current.focus()}>
          {para !== null ? (
            <p ref={paraRef}>
              {para.split("").map((char, idx) => (
                <span key={idx}>{char}</span>
              ))}
            </p>
          ) : (
            ""
          )}
        </div>
        <div className="content">
          <ul className="result-details">
            <li className="time">
              <p>Time Left:</p>
              <span>
                <b>{timer}</b>s
              </span>
            </li>
            <li className="mistake">
              <p>Mistakes:</p>
              <span>{mistakes}</span>
            </li>
            <li className="wpm">
              <p>WPM:</p>
              <span>{wpm}</span>
            </li>
            <li className="cpm">
              <p>CPM:</p>
              <span>{cpm}</span>
            </li>
          </ul>
          <button onClick={() => setRetry(true)}>Try Again</button>
        </div>
      </div>
    </div>
  );
};

export default Home;
